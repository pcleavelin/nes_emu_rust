use std::fmt;
use enum_primitive::FromPrimitive;

enum_from_primitive! {
    #[derive(Debug, PartialEq)]
    pub enum Op {
        BRKImmediate   = 0x00,
        ORAIndirectX   = 0x01,
        ORAZeroPage    = 0x05,
        ASLZeroPage    = 0x06,
        PHPImplied     = 0x08,
        ORAImmediate   = 0x09,
        ASLAccumulator = 0x0A,
        ORAAbsolute    = 0x0D,
        ASLAbsolute    = 0x0E,
        BPLRelative    = 0x10,
        ORAIndirectY   = 0x11,
        ORAZeroPageX   = 0x15,
        ASLZeroPageX   = 0x16,
        CLCImplied     = 0x18,
        ORAAbsoluteY   = 0x19,
        ORAAbsoluteX   = 0x1D,
        ASLAbsoluteX   = 0x1E,
        JSRAbsolute    = 0x20,
        ANDIndirectX   = 0x21,
        BITZeroPage    = 0x24,
        ANDZeroPage    = 0x25,
        ROLZeroPage    = 0x26,
        PLPImplied     = 0x28,
        ANDImmediate   = 0x29,
        ROLAccumulator = 0x2A,
        BITAbsolute    = 0x2C,
        ANDAbsolute    = 0x2D,
        ROLAbsolute    = 0x2E,
        BMIRelative    = 0x30,
        ANDIndirectY   = 0x31,
        ANDZeroPageX   = 0x35,
        ROLZeroPageX   = 0x36,
        SECImplied     = 0x38,
        ANDAbsoluteY   = 0x39,
        ANDAbsoluteX   = 0x3D,
        ROLAbsoluteX   = 0x3E,
        RTIImplied     = 0x40,
        EORIndirectX   = 0x41,
        EORZeroPage    = 0x45,
        LSRZeroPage    = 0x46,
        PHAImplied     = 0x48,
        EORImmediate   = 0x49,
        LSRAccumulator = 0x4A,
        JMPAbsolute    = 0x4C,
        EORAbsolute    = 0x4D,
        LSRAbsolute    = 0x4E,
        BVCRelative    = 0x50,
        EORIndirectY   = 0x51,
        EORZeroPageX   = 0x55,
        LSRZeroPageX   = 0x56,
        CLIImplied     = 0x58,
        EORAbsoluteY   = 0x59,
        EORAbsoluteX   = 0x5D,
        LSRAbsoluteX   = 0x5E,
        RTSImplied     = 0x60,
        ADCIndirectX   = 0x61,
        ADCZeroPage    = 0x65,
        RORZeroPage    = 0x66,
        PLAImplied     = 0x68,
        ADCImmediate   = 0x69,
        RORAccumulator = 0x6A,
        JMPAbsIndirect = 0x6C,
        ADCAbsolute    = 0x6D,
        RORAbsolute    = 0x6E,
        BVSRelative    = 0x70,
        ADCIndirectY   = 0x71,
        ADCZeroPageX   = 0x75,
        RORZeroPageX   = 0x76,
        SEIImplied     = 0x78,
        ADCAbsoluteY   = 0x79,
        ADCAbsoluteX   = 0x7D,
        RORAbsoluteX   = 0x7E,
        STAIndirectX   = 0x81,
        STYZeroPage    = 0x84,
        STAZeroPage    = 0x85,
        STXZeroPage    = 0x86,
        DEYImplied     = 0x88,
        TXAImplied     = 0x8A,
        STYAbsolute    = 0x8C,
        STXAbsolute    = 0x8E,
        STAAbsolute    = 0x8D,
        BCCRelative    = 0x90,
        STAIndirectY   = 0x91,
        STYZeroPageX   = 0x94,
        STAZeroPageX   = 0x95,
        STXZeroPageY   = 0x96,
        TYAImplied     = 0x98,
        STAAbsoluteY   = 0x99,
        TXSImplied     = 0x9A,
        STAAbsoluteX   = 0x9D,
        LDYImmediate   = 0xA0,
        LDAIndirectX   = 0xA1,
        LDXImmediate   = 0xA2,
        LDYZeroPage    = 0xA4,
        LDAZeroPage    = 0xA5,
        LDXZeroPage    = 0xA6,
        TAYImplied     = 0xA8,
        LDAImmediate   = 0xA9,
        TAXImplied     = 0xAA,
        LDAAbsolute    = 0xAD,
        LDYAbsolute    = 0xAC,
        LDXAbsolute    = 0xAE,
        BCSRelative    = 0xB0,
        LDAIndirectY   = 0xB1,
        LDYZeroPageX   = 0xB4,
        LDAZeroPageX   = 0xB5,
        LDXZeroPageY   = 0xB6,
        CLVImplied     = 0xB8,
        LDAAbsoluteY   = 0xB9,
        TSXImplied     = 0xBA,
        LDYAbsoluteX   = 0xBC,
        LDAAbsoluteX   = 0xBD,
        LDXAbsoluteY   = 0xBE,
        CPYImmediate   = 0xC0,
        CMPIndirectX   = 0xC1,
        CPYZeroPage    = 0xC4,
        CMPZeroPage    = 0xC5,
        DECZeroPage    = 0xC6,
        INYImplied     = 0xC8,
        CMPImmediate   = 0xC9,
        DEXImplied     = 0xCA,
        CPYAbsolute    = 0xCC,
        CMPAbsolute    = 0xCD,
        DECAbsolute    = 0xCE,
        BNERelative    = 0xD0,
        CMPIndirectY   = 0xD1,
        CMPZeroPageX   = 0xD5,
        DECZeroPageX   = 0xD6,
        CLDImplied     = 0xD8,
        CMPAbsoluteY   = 0xD9,
        CMPAbsoluteX   = 0xDD,
        DECAbsoluteX   = 0xDE,
        CPXImmediate   = 0xE0,
        SBCIndirectX   = 0xE1,
        CPXZeroPage    = 0xE4,
        SBCZeroPage    = 0xE5,
        INCZeroPage    = 0xE6,
        INXImplied     = 0xE8,
        SBCImmediate   = 0xE9,
        CPXAbsolute    = 0xEC,
        INCAbsolute    = 0xEE,
        SBCAbsolute    = 0xED,
        BEQRelative    = 0xF0,
        SBCIndirectY   = 0xF1,
        SBCZeroPageX   = 0xF5,
        INCZeroPageX   = 0xF6,
        SEDImplied     = 0xF8,
        SBCAbsoluteY   = 0xF9,
        SBCAbsoluteX   = 0xFD,
        INCAbsoluteX   = 0xFE,
        NOPImplied     = 0xEA,
    }
}

#[derive(Copy, Clone)]
pub struct Opcode {
    instruction: u32,
}

impl Opcode {
    pub fn new(op: u32) -> Opcode {
        Opcode {
            instruction: op
        }
    }

    pub fn op(&self) -> u8 {
        (self.instruction & 0xFF) as u8
    }

    pub fn imm1(&self) -> u8 {
        ((self.instruction >> 8) & 0xFF) as u8
    }

    pub fn imm2(&self) -> u8 {
        ((self.instruction >> 16) & 0xFF) as u8
    }

    pub fn abs_addr(&self) -> u16 {
        (self.instruction >> 8) as u16
    }

    pub fn get_num_cycles(&self) -> u32 {
        match Op::from_i32(self.op() as i32) {
            Some(op) => {
                match op {
                    Op::BRKImmediate   => 7,
                    Op::ORAIndirectX   => 6,
                    Op::ORAZeroPage    => 3,
                    Op::ASLZeroPage    => 5,
                    Op::PHPImplied     => 3,
                    Op::ORAImmediate   => 2,
                    Op::ASLAccumulator => 2,
                    Op::ORAAbsolute    => 4,
                    Op::ASLAbsolute    => 6,
                    Op::BPLRelative    => 2,
                    Op::ORAIndirectY   => 5,
                    Op::ORAZeroPageX   => 4,
                    Op::ASLZeroPageX   => 6,
                    Op::CLCImplied     => 2,
                    Op::ORAAbsoluteY   => 4,
                    Op::ORAAbsoluteX   => 4,
                    Op::ASLAbsoluteX   => 7,
                    Op::JSRAbsolute    => 6,
                    Op::ANDIndirectX   => 6,
                    Op::BITZeroPage    => 3,
                    Op::ANDZeroPage    => 3,
                    Op::ROLZeroPage    => 5,
                    Op::PLPImplied     => 4,
                    Op::ANDImmediate   => 2,
                    Op::ROLAccumulator => 2,
                    Op::BITAbsolute    => 4,
                    Op::ANDAbsolute    => 4,
                    Op::ROLAbsolute    => 6,
                    Op::BMIRelative    => 2,
                    Op::ANDIndirectY   => 5,
                    Op::ANDZeroPageX   => 4,
                    Op::ROLZeroPageX   => 6,
                    Op::SECImplied     => 2,
                    Op::ANDAbsoluteY   => 4,
                    Op::ANDAbsoluteX   => 4,
                    Op::ROLAbsoluteX   => 7,
                    Op::RTIImplied     => 6,
                    Op::EORIndirectX   => 6,
                    Op::EORZeroPage    => 3,
                    Op::LSRZeroPage    => 5,
                    Op::PHAImplied     => 3,
                    Op::EORImmediate   => 2,
                    Op::LSRAccumulator => 2,
                    Op::JMPAbsolute    => 3,
                    Op::EORAbsolute    => 4,
                    Op::LSRAbsolute    => 6,
                    Op::BVCRelative    => 2,
                    Op::EORIndirectY   => 5,
                    Op::EORZeroPageX   => 4,
                    Op::LSRZeroPageX   => 6,
                    Op::CLIImplied     => 2,
                    Op::EORAbsoluteY   => 4,
                    Op::EORAbsoluteX   => 4,
                    Op::LSRAbsoluteX   => 7,
                    Op::RTSImplied     => 6,
                    Op::ADCIndirectX   => 6,
                    Op::ADCZeroPage    => 3,
                    Op::RORZeroPage    => 5,
                    Op::PLAImplied     => 4,
                    Op::ADCImmediate   => 2,
                    Op::RORAccumulator => 2,
                    Op::JMPAbsIndirect => 5,
                    Op::ADCAbsolute    => 4,
                    Op::RORAbsolute    => 6,
                    Op::BVSRelative    => 2,
                    Op::ADCIndirectY   => 5,
                    Op::ADCZeroPageX   => 4,
                    Op::RORZeroPageX   => 6,
                    Op::SEIImplied     => 2,
                    Op::ADCAbsoluteY   => 4,
                    Op::ADCAbsoluteX   => 4,
                    Op::RORAbsoluteX   => 7,
                    Op::STAIndirectX   => 6,
                    Op::STYZeroPage    => 3,
                    Op::STAZeroPage    => 3,
                    Op::STXZeroPage    => 3,
                    Op::DEYImplied     => 2,
                    Op::TXAImplied     => 2,
                    Op::STYAbsolute    => 4,
                    Op::STXAbsolute    => 4,
                    Op::STAAbsolute    => 4,
                    Op::BCCRelative    => 2,
                    Op::STAIndirectY   => 6,
                    Op::STYZeroPageX   => 4,
                    Op::STAZeroPageX   => 4,
                    Op::STXZeroPageY   => 4,
                    Op::TYAImplied     => 2,
                    Op::STAAbsoluteY   => 5,
                    Op::TXSImplied     => 2,
                    Op::STAAbsoluteX   => 5,
                    Op::LDYImmediate   => 2,
                    Op::LDAIndirectX   => 6,
                    Op::LDXImmediate   => 2,
                    Op::LDYZeroPage    => 3,
                    Op::LDAZeroPage    => 3,
                    Op::LDXZeroPage    => 3,
                    Op::TAYImplied     => 2,
                    Op::LDAImmediate   => 2,
                    Op::TAXImplied     => 2,
                    Op::LDAAbsolute    => 4,
                    Op::LDYAbsolute    => 4,
                    Op::LDXAbsolute    => 4,
                    Op::BCSRelative    => 2,
                    Op::LDAIndirectY   => 5,
                    Op::LDYZeroPageX   => 4,
                    Op::LDAZeroPageX   => 4,
                    Op::LDXZeroPageY   => 4,
                    Op::CLVImplied     => 2,
                    Op::LDAAbsoluteY   => 4,
                    Op::TSXImplied     => 2,
                    Op::LDYAbsoluteX   => 4,
                    Op::LDAAbsoluteX   => 4,
                    Op::LDXAbsoluteY   => 4,
                    Op::CPYImmediate   => 2,
                    Op::CMPIndirectX   => 6,
                    Op::CPYZeroPage    => 3,
                    Op::CMPZeroPage    => 3,
                    Op::DECZeroPage    => 5,
                    Op::INYImplied     => 2,
                    Op::CMPImmediate   => 2,
                    Op::DEXImplied     => 2,
                    Op::CPYAbsolute    => 4,
                    Op::CMPAbsolute    => 4,
                    Op::DECAbsolute    => 4,
                    Op::BNERelative    => 2,
                    Op::CMPIndirectY   => 5,
                    Op::CMPZeroPageX   => 4,
                    Op::DECZeroPageX   => 6,
                    Op::CLDImplied     => 2,
                    Op::CMPAbsoluteY   => 4,
                    Op::CMPAbsoluteX   => 4,
                    Op::DECAbsoluteX   => 7,
                    Op::CPXImmediate   => 2,
                    Op::SBCIndirectX   => 6,
                    Op::CPXZeroPage    => 3,
                    Op::SBCZeroPage    => 3,
                    Op::INCZeroPage    => 5,
                    Op::INXImplied     => 2,
                    Op::SBCImmediate   => 2,
                    Op::CPXAbsolute    => 4,
                    Op::INCAbsolute    => 6,
                    Op::SBCAbsolute    => 4,
                    Op::BEQRelative    => 2,
                    Op::SBCIndirectY   => 5,
                    Op::SBCZeroPageX   => 4,
                    Op::INCZeroPageX   => 6,
                    Op::SEDImplied     => 2,
                    Op::SBCAbsoluteY   => 2,
                    Op::SBCAbsoluteX   => 4,
                    Op::INCAbsoluteX   => 7,
                    Op::NOPImplied     => 2,
                }
            }
            _ => {
                0
            }
        }
    }
}

impl fmt::Debug for Opcode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Opcode: {{\n\top: 0x{:02X},\n\timm1: 0x{:02X}\n\timm2: 0x{:02X}\n}}", 
               self.op(), self.imm1(), self.imm2())
    }
}
